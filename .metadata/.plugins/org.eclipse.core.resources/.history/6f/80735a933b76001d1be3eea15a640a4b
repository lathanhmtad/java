import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class DanhSachSinhVien {
	private ArrayList<SinhVien> danhSach;
	
	public DanhSachSinhVien() {
		this.danhSach=new ArrayList<SinhVien>();
	}

	public DanhSachSinhVien(ArrayList<SinhVien> danhSach) {
		this.danhSach = danhSach;
	}
	
	public void themSinhVien(SinhVien sv) {
		this.danhSach.add(sv);
	}
	
	public void inDanhSachSinhVien() {
		for (SinhVien sinhVien : danhSach) {
			System.out.println(sinhVien);
		}
	}
	
	public void ghiDanhSachSinhVien() {
		try {
			PrintWriter writer1 = null;
	        writer1 = new PrintWriter(new File("D:\\testout.txt"));
	        ArrayList<String> list = new ArrayList<String>();
	        list.add("Java");
	        list.add("Spring");
	        list.add("c++");
	        
	        for (String string : list) {
				writer1.write(string);
			}
	        
	        writer1.flush();
	        writer1.close();
		}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void docDanhSachSinhVien(){
		File f = new File("D:\\testout.txt"); 
		try {
			BufferedReader br = Files.newBufferedReader(f.toPath(),StandardCharsets.UTF_8);
			String line = null;
			while(true) {
				line = br.readLine();
				if(line==null)
					break;
				else
					System.out.println(line);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public boolean kiemTraDanhSachRong() {
		return this.danhSach.isEmpty();
	}
	
	public int laySoLuongSinhVien() {
		return this.danhSach.size();
	}
	
	public void  lamRongDanhSach() {
		this.danhSach.removeAll(danhSach);
	}
	
	public boolean kiemTraTonTai(SinhVien sv) {
		return this.danhSach.contains(sv);
	}
	
	public void xoaSinhVien(SinhVien sv) {
		this.danhSach.remove(sv);
	}
	
	public void timSinhVien(String ten) {
		for (SinhVien sinhVien : danhSach) {
			if(sinhVien.getHoVaTen().indexOf(ten)>=0)
				System.out.println(sinhVien);
		}
	}
	
	public void sapXepSinhVien() {
		Collections.sort(this.danhSach, new Comparator<SinhVien>() {

			@Override
			public int compare(SinhVien sv1, SinhVien sv2) {
				if(sv1.getDiemTrungBinh()>sv2.getDiemTrungBinh())
					return -1;
				else if(sv1.getDiemTrungBinh()<sv2.getDiemTrungBinh())
					return 1;
				else
					return 0;
			}
		});
	}
	
	
	
}
